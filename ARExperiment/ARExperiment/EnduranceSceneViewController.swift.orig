//
//  ViewController.swift
//  ARExperiment
//
//  Created by Berta Devant on 02/01/2018.
//  Copyright Â© 2018 Berta Devant. All rights reserved.
//

import UIKit
import SceneKit
import ARKit

class EnduranceSceneViewController: UIViewController {

    @IBOutlet var sceneView: ARSCNView!
<<<<<<< HEAD:ARExperiment/ARExperiment/EnduranceSceneViewController.swift
    fileprivate var modelNodeModel: SCNNode?
    private let modelNodeName = "enduranceV3"
    private var spotLight: SCNLight!
=======
    fileprivate var nodeModel: SCNNode?
    //MARK: These strings is what you need to switch between different 3D objects
    /** NodeName is the name of the object you want to show, not necessarily the name of the file.
        - You can find the nodeName and change when opening the file on SceneKit Editor (click on the file or right click and use open as SceneKit Editor)
        - on the left bottom side of the corner there should be an icon called "Show the scene graph View" click on that, you will now see the hierarchy of the object, tap the object at the top you want to use
        - on the right top of xcode there should be a button called "Hide or show utilities" open the utilities using it
        - On the top of the utilities look for the cube icon called "Show the nodes inspector" and click on that
        - Under identity -> Name there should be a textField, that is the nodeName you need for here
     **/
    private let nodeName = "icecream"
    private let fileName = "icecream"
    private let fileExtension = "dae"
>>>>>>> d92876cf9a92e0762d9d4ed4e2f99e1f9b57742f:ARExperiment/ARExperiment/OneSceneViewController.swift

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Set the view's delegate
        sceneView.delegate = self
        
        // Show statistics such as fps and timing information
        sceneView.showsStatistics = false
        sceneView.debugOptions = []
        sceneView.antialiasingMode = .multisampling4X

<<<<<<< HEAD:ARExperiment/ARExperiment/EnduranceSceneViewController.swift
        modelNodeModel = createSceneNodeForAsset(modelNodeName, assetPath: "art.scnassets/endurance-rotating.dae")
        //let scene = SCNScene(named: "art.scnassets/tars.scn")
        //sceneView.scene = scene!
=======
        nodeModel = createSceneNodeForAsset(nodeName, assetPath: "art.scnassets/\(fileName).\(fileExtension)")
>>>>>>> d92876cf9a92e0762d9d4ed4e2f99e1f9b57742f:ARExperiment/ARExperiment/OneSceneViewController.swift
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Create a session configuration
        let configuration = ARWorldTrackingConfiguration()
        configuration.isLightEstimationEnabled = true;
        // Run the view's session
        sceneView.session.run(configuration)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        // Pause the view's session
        sceneView.session.pause()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Release any cached data, images, etc that aren't in use.
    }

    private func createSceneNodeForAsset(_ assetName: String, assetPath: String) -> SCNNode? {
        guard let paperPlaneScene = SCNScene(named: assetPath) else {
            return nil
        }
        let carNode = paperPlaneScene.rootNode.childNode(withName: assetName, recursively: true)
        return carNode
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard let location = touches.first?.location(in: sceneView) else {
            return
        }

        if let nodeExists = sceneView.scene.rootNode.childNode(withName: modelNodeName, recursively: true) {
            nodeExists.removeFromParentNode()
        }
        
        let hitResultsFeaturePoints: [ARHitTestResult] =
            sceneView.hitTest(location, types: .featurePoint)

        if let hit = hitResultsFeaturePoints.first {
            
            let rotate = simd_float4x4(SCNMatrix4MakeRotation(sceneView.session.currentFrame!.camera.eulerAngles.y, 0, 1, 0))
            
            let finalTransform = simd_mul(hit.worldTransform, rotate)
            
            let anchor = ARAnchor(transform: finalTransform)
            print("anchor \(anchor)")
            sceneView.session.add(anchor: anchor)
        }
    }
    
}

extension EnduranceSceneViewController: ARSCNViewDelegate {

    func renderer(_ renderer: SCNSceneRenderer, didAdd node: SCNNode, for anchor: ARAnchor) {
        if !anchor.isKind(of: ARPlaneAnchor.self) {
            DispatchQueue.main.async {
                guard let model = self.modelNodeModel else {
                    print("we have no model")
                    return
                }
                
                let modelClone = model.clone()
                modelClone.position = SCNVector3Zero

                node.addChildNode(modelClone)
                
            }
        }
    }
<<<<<<< HEAD:ARExperiment/ARExperiment/EnduranceSceneViewController.swift

    func session(_ session: ARSession, didFailWithError error: Error) {
        // Present an error message to the user

    }

    func sessionWasInterrupted(_ session: ARSession) {
        // Inform the user that the session has been interrupted, for example, by presenting an overlay

    }

    func sessionInterruptionEnded(_ session: ARSession) {
        // Reset tracking and/or remove existing anchors if consistent tracking is required

    }
=======
>>>>>>> d92876cf9a92e0762d9d4ed4e2f99e1f9b57742f:ARExperiment/ARExperiment/OneSceneViewController.swift
}
